events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Docker DNS resolver
    resolver 127.0.0.11 valid=10s ipv6=off;

    # WebSocket support for Upgrade header (must be in http block)
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream definitions with health checks
    upstream auth-service {
        server auth-service:8080 max_fails=2 fail_timeout=10s;
        keepalive 32;
    }

    upstream user-service {
        server user-service:8080 max_fails=2 fail_timeout=10s;
        keepalive 32;
    }

    upstream note-service {
        server note-service:8080 max_fails=2 fail_timeout=10s;
        keepalive 32;
    }

    upstream keycloak {
        server keycloak:8080 max_fails=2 fail_timeout=10s;
        keepalive 32;
    }

    upstream swagger-ui {
        server swagger-ui:8080 max_fails=2 fail_timeout=10s;
        keepalive 32;
    }

    # Main server block
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Buffer settings
        client_max_body_size 50M;
        client_body_buffer_size 16k;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 16k;
        
        # Proxy settings
        proxy_buffering on;
        proxy_buffer_size 16k;
        proxy_buffers 8 16k;
        proxy_busy_buffers_size 32k;
        proxy_temp_file_write_size 128k;
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

        # Common proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # Health check endpoint
        location = /health {
            access_log off;
            return 200 "OK - NGINX is running\nTimestamp: $time_iso8601\nUpstreams: auth-service, user-service, note-service, keycloak, swagger-ui\n";
            add_header Content-Type text/plain;
        }

        # Root - redirect to Swagger UI
        location = / {
            return 302 /swagger-ui/;
        }

        # Favicon
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            return 204;
        }

        # Swagger UI service
        location /swagger-ui/ {
            proxy_pass http://swagger-ui/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_redirect off;
            error_page 502 503 504 = @swagger_error;
        }

        # Auth service endpoints
        location /auth/ {
            proxy_pass http://auth-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            error_page 502 503 504 = @auth_error;
        }

        # Auth service without trailing slash
        location = /auth {
            return 301 /auth/;
        }

        # User service endpoints  
        location /users/ {
            proxy_pass http://user-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            error_page 502 503 504 = @user_error;
        }

        # User service without trailing slash
        location = /users {
            return 301 /users/;
        }

        # Note service endpoints
        location /notes/ {
            proxy_pass http://note-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            error_page 502 503 504 = @note_error;
        }

        # Note service without trailing slash
        location = /notes {
            return 301 /notes/;
        }

        # GraphQL endpoint
        location = /graphql {
            proxy_pass http://note-service/graphql;
            
            # GraphQL specific settings
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $content_type;
            
            # Error handling
            error_page 502 503 504 = @graphql_error;
        }

        # Keycloak service (fix path, headers, and WebSocket support)
        location /keycloak/ {
            proxy_pass http://keycloak/; # Proxies to the root of the keycloak upstream
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host; # Important for Keycloak
            proxy_set_header X-Forwarded-Port $server_port; # Important for Keycloak

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade; # For WebSocket
            proxy_set_header Connection "upgrade";   # For WebSocket, explicitly "upgrade"

            proxy_buffer_size 128k;
            proxy_buffers 16 128k;
            proxy_busy_buffers_size 256k;

            proxy_connect_timeout 30s; # Increased for Keycloak
            proxy_send_timeout 120s;   # Increased for Keycloak
            proxy_read_timeout 120s;   # Increased for Keycloak

            proxy_redirect off; # Let Keycloak handle its own redirects based on HOSTNAME_URL
            
            error_page 502 503 504 = @keycloak_error;
        }

        # API documentation shortcut
        location = /api-docs {
            return 302 /swagger-ui/;
        }

        # Login shortcut
        location = /login {
            return 302 /auth/login;
        }

        # Debug endpoint
        location = /debug {
            return 200 "NGINX Debug Info:
Server: $server_name
Host: $host
Remote IP: $remote_addr
Time: $time_iso8601
Request: $request_method $request_uri
User Agent: $http_user_agent
Forwarded For: $proxy_add_x_forwarded_for
";
            add_header Content-Type text/plain;
        }

        # Service status endpoint
        location = /status {
            access_log off;
            return 200 "Service Status:
- Auth Service: http://auth-service:8080
- User Service: http://user-service:8080  
- Note Service: http://note-service:8080
- Keycloak: http://keycloak:8080
- Swagger UI: http://swagger-ui:8080

Available endpoints:
- /health - NGINX health check
- /swagger-ui/ - API documentation
- /auth/ - Authentication service
- /users/ - User management service
- /notes/ - Note management service
- /graphql - GraphQL endpoint
- /keycloak/ - Identity management
- /debug - Debug information
";
            add_header Content-Type text/plain;
        }

        # Error page handlers
        location @swagger_error {
            return 503 "Swagger UI service unavailable. Try direct access: http://localhost:8094";
            add_header Content-Type text/plain;
        }

        location @auth_error {
            return 503 "Auth service unavailable. Service may be starting up.";
            add_header Content-Type text/plain;
        }

        location @user_error {
            return 503 "User service unavailable. Service may be starting up.";
            add_header Content-Type text/plain;
        }

        location @note_error {
            return 503 "Note service unavailable. Service may be starting up.";
            add_header Content-Type text/plain;
        }

        location @graphql_error {
            return 503 "GraphQL endpoint unavailable. Note service may be starting up.";
            add_header Content-Type text/plain;
        }

        location @keycloak_error {
            return 503 "Keycloak service unavailable. Try direct access: http://localhost:8095";
            add_header Content-Type text/plain;
        }

        # Catch-all for unmatched routes
        location / {
            return 404 "Page not found.

Available routes:
- / (redirects to Swagger UI)
- /health (NGINX health check)
- /status (service status)
- /swagger-ui/ (API documentation)
- /auth/ (authentication endpoints)
- /users/ (user management)
- /notes/ (note management)  
- /graphql (GraphQL API)
- /keycloak/ (identity management)
- /debug (debug information)

For direct service access use ports 8091-8095.
";
            add_header Content-Type text/plain;
        }
    }
}
