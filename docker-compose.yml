version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - auth-service
      - user-service
      - note-service
    networks:
      - microservices-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    command: start-dev
    depends_on:
      - keycloak-db
    networks:
      - microservices-network

  keycloak-db:
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  auth-service:
    build: ./auth-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGO_HOST: mongo-passwords
      MONGO_PORT: 27017
      MONGO_DATABASE: ${AUTH_MONGO_DATABASE}
      MONGO_USERNAME: ${AUTH_MONGO_USERNAME}
      MONGO_PASSWORD: ${AUTH_MONGO_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
    depends_on:
      - mongo-passwords
      - keycloak
    networks:
      - microservices-network

  user-service:
    build: ./user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGO_HOST: mongo-users
      MONGO_PORT: 27017
      MONGO_DATABASE: ${USER_MONGO_DATABASE}
      MONGO_USERNAME: ${USER_MONGO_USERNAME}
      MONGO_PASSWORD: ${USER_MONGO_PASSWORD}
      AUTH_MONGO_HOST: mongo-passwords
      AUTH_MONGO_DATABASE: ${AUTH_MONGO_DATABASE}
      AUTH_MONGO_USERNAME: ${AUTH_MONGO_USERNAME}
      AUTH_MONGO_PASSWORD: ${AUTH_MONGO_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
    depends_on:
      - mongo-users
      - mongo-passwords
      - keycloak
    networks:
      - microservices-network

  note-service:
    build: ./note-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      NEO4J_URI: bolt://neo4j-notes:7687
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
    depends_on:
      - neo4j-notes
      - keycloak
    networks:
      - microservices-network

  mongo-users:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${USER_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${USER_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${USER_MONGO_DATABASE}
    volumes:
      - mongo_users_data:/data/db
    networks:
      - microservices-network

  mongo-passwords:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${AUTH_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${AUTH_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${AUTH_MONGO_DATABASE}
    volumes:
      - mongo_passwords_data:/data/db
    networks:
      - microservices-network

  neo4j-notes:
    image: neo4j:5
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
    networks:
      - microservices-network

volumes:
  mongo_users_data:
  mongo_passwords_data:
  neo4j_data:
  keycloak_data:

networks:
  microservices-network:
    driver: bridge
