version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
      - "8080:80"  # Alternative port for debugging
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - swagger-ui
      - auth-service
      - user-service
      - note-service
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s # Reduced from 120s
    restart: unless-stopped

  swagger-ui:
    image: swaggerapi/swagger-ui
    environment:
      URLS: '[
        {"url": "http://auth-service:8080/v3/api-docs", "name": "Auth Service"},
        {"url": "http://user-service:8080/v3/api-docs", "name": "User Service"},
        {"url": "http://note-service:8080/v3/api-docs", "name": "Note Service"}
      ]'
      BASE_URL: /swagger-ui
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s # Much faster
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_LOG_LEVEL: INFO
      # Remove conflicting JAVA_OPTS and use Keycloak-specific memory settings
      KC_MEMORY: "1g"
      # Development optimizations
      KC_CACHE: local
      KC_TRANSACTION_XA_ENABLED: "false"
      # Database connection optimization
      KC_DB_POOL_INITIAL_SIZE: "5"
      KC_DB_POOL_MIN_SIZE: "5"
      KC_DB_POOL_MAX_SIZE: "10"
    command: ["start-dev"]  # Remove --auto-build as it's not a valid option
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - microservices-network
    # Resource limits to prevent excessive resource usage
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 300s  # Increased to 5 minutes to account for initial build time
    restart: unless-stopped

  keycloak-db:
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER} -d keycloak -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Reduced from 120s
    restart: unless-stopped

  auth-service:
    build: ./auth-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGO_HOST: mongo-passwords
      MONGO_PORT: 27017
      MONGO_DATABASE: ${AUTH_MONGO_DATABASE}
      MONGO_USERNAME: ${AUTH_MONGO_USERNAME}
      MONGO_PASSWORD: ${AUTH_MONGO_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mongo-passwords:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    ports:
      - "8091:8080"  # Changed from 8081 to match start.sh

  user-service:
    build: ./user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGO_HOST: mongo-users
      MONGO_PORT: 27017
      MONGO_DATABASE: ${USER_MONGO_DATABASE}
      MONGO_USERNAME: ${USER_MONGO_USERNAME}
      MONGO_PASSWORD: ${USER_MONGO_PASSWORD}
      AUTH_MONGO_HOST: mongo-passwords
      AUTH_MONGO_DATABASE: ${AUTH_MONGO_DATABASE}
      AUTH_MONGO_USERNAME: ${AUTH_MONGO_USERNAME}
      AUTH_MONGO_PASSWORD: ${AUTH_MONGO_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mongo-users:
        condition: service_healthy
      mongo-passwords:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    ports:
      - "8092:8080"  # Changed from 8082 to match start.sh

  note-service:
    build: ./note-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      NEO4J_URI: bolt://neo4j-notes:7687
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      neo4j-notes:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    ports:
      - "8093:8080"  # Changed from 8083 to match start.sh

  mongo-users:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${USER_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${USER_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${USER_MONGO_DATABASE}
    volumes:
      - mongo_users_data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s # Much faster
    restart: unless-stopped

  mongo-passwords:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${AUTH_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${AUTH_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${AUTH_MONGO_DATABASE}
    volumes:
      - mongo_passwords_data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  neo4j-notes:
    image: neo4j:5
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*"
    volumes:
      - neo4j_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USERNAME}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s # Reduced from 90s
    restart: unless-stopped

volumes:
  mongo_users_data:
  mongo_passwords_data:
  neo4j_data:
  keycloak_data:

networks:
  microservices-network:
    driver: bridge
