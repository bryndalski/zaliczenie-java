version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - swagger-ui
      - auth-service
      - user-service
      - note-service
      - keycloak
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  swagger-ui:
    image: swaggerapi/swagger-ui
    environment:
      URLS: '[
        {"url": "/api/auth/v3/api-docs", "name": "Auth Service"},
        {"url": "/api/users/v3/api-docs", "name": "User Service"},
        {"url": "/api/notes/v3/api-docs", "name": "Note Service"}
      ]'
      BASE_URL: /swagger-ui
      SWAGGER_JSON_URL: ""
      VALIDATOR_URL: "null"
      # Tell Swagger UI to use the correct server URLs
      API_URLS: '[
        {"url": "/api/auth/v3/api-docs", "name": "Auth Service"},
        {"url": "/api/users/v3/api-docs", "name": "User Service"},
        {"url": "/api/notes/v3/api-docs", "name": "Note Service"}
      ]'
      # Disable Swagger UI try it functionality to avoid CORS issues
      DISABLE_SWAGGER_DEFAULT_URL: "true"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s # Much faster
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      # Crucial for reverse proxy setup
      KC_PROXY: "edge"
      PROXY_ADDRESS_FORWARDING: "true"
      KC_HOSTNAME_URL: "http://localhost/keycloak"
      KC_HOSTNAME_ADMIN_URL: "http://localhost/keycloak"
      KC_FRONTEND_URL: "http://localhost/keycloak"
      
      # Existing variables
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # Force overwrite existing realm
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/microservices-realm.json
      KC_SPI_IMPORT_STRATEGY: OVERWRITE_EXISTING
      KC_LOG_LEVEL: INFO
      KC_LOG_CONSOLE_COLOR: "true"
    command: ["start-dev", "--import-realm"]
    volumes:
      - ./keycloak-realm.json:/opt/keycloak/data/import/realm-microservices.json:ro
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      # Use simpler health check that works immediately when Keycloak starts
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 15  # More retries
      start_period: 120s  # Reduced start period
    restart: unless-stopped
   

  keycloak-db:
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER} -d keycloak -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Reduced from 120s
    restart: unless-stopped

  auth-service:
    build: ./auth-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGO_HOST: mongo-passwords
      MONGO_PORT: 27017
      MONGO_DATABASE: ${AUTH_MONGO_DATABASE}
      MONGO_USERNAME: ${AUTH_MONGO_USERNAME}
      MONGO_PASSWORD: ${AUTH_MONGO_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      USER_SERVICE_URL: http://user-service:8080
      USER_API_KEY: ${USER_API_KEY}
      JAVA_OPTS: "-Xmx512m -Xms256m"
      # Admin user configuration
      ADMIN_EMAIL: admin@admin.com
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: zaq1@WSX
      # Make service more tolerant of Keycloak startup delays
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://localhost/keycloak/realms/${KEYCLOAK_REALM}
    depends_on:
      mongo-passwords:
        condition: service_healthy
      # Remove Keycloak dependency temporarily to allow independent startup
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s  # Increased due to potential Keycloak delays
    restart: unless-stopped


  user-service:
    build: ./user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGO_HOST: mongo-users
      MONGO_PORT: 27017
      MONGO_DATABASE: ${USER_MONGO_DATABASE}
      MONGO_USERNAME: ${USER_MONGO_USERNAME}
      MONGO_PASSWORD: ${USER_MONGO_PASSWORD}
      AUTH_MONGO_HOST: mongo-passwords
      AUTH_MONGO_DATABASE: ${AUTH_MONGO_DATABASE}
      AUTH_MONGO_USERNAME: ${AUTH_MONGO_USERNAME}
      AUTH_MONGO_PASSWORD: ${AUTH_MONGO_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${USER_KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${USER_KEYCLOAK_CLIENT_SECRET}
      API_KEY: ${USER_API_KEY}
      JAVA_OPTS: "-Xmx512m -Xms256m"
      # OAuth2 Resource Server configuration
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://localhost/keycloak/realms/${KEYCLOAK_REALM}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/${KEYCLOAK_REALM}/protocol/openid-connect/certs
    depends_on:
      mongo-users:
        condition: service_healthy
      mongo-passwords:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped
  

  note-service:
    build: ./note-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      NEO4J_URI: bolt://neo4j-notes:7687
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${NOTE_KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${NOTE_KEYCLOAK_CLIENT_SECRET}
      JAVA_OPTS: "-Xmx512m -Xms256m"
      # OAuth2 Resource Server configuration
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://localhost/keycloak/realms/${KEYCLOAK_REALM}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/${KEYCLOAK_REALM}/protocol/openid-connect/certs
    depends_on:
      neo4j-notes:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped


  mongo-users:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${USER_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${USER_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${USER_MONGO_DATABASE}
    volumes:
      - mongo_users_data:/data/db
      - ./mongo-init-users.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  mongo-passwords:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${AUTH_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${AUTH_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${AUTH_MONGO_DATABASE}
    volumes:
      - mongo_passwords_data:/data/db
      - ./mongo-init-auth.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  neo4j-notes:
    image: neo4j:5
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*"
    volumes:
      - neo4j_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USERNAME}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s # Reduced from 90s
    restart: unless-stopped

volumes:
  mongo_users_data:
  mongo_passwords_data:
  neo4j_data:
  keycloak_data:

networks:
  microservices-network:
    driver: bridge
